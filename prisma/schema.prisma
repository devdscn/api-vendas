generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Clientes {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  idEmpresa     Int
  idCliente     Int
  idVendedor    Int
  razaSocial    String
  fantasia      String
  documento     String
  endereco      String
  bairro        String
  cep           String
  cidade        String
  contato       String?
  /// Multiple data types found: Float: 7.3%, Int: 92.7% out of 1000 sampled entries
  credito       Float
  fone          String
  inscEstadual  String?
  meioPagamento String
  rota          Int
  status        Int
  uf            String
}

model Empresas {
  id           Int    @id @map("_id")
  documento    String
  fantasia     String
  inscEstadual String
  razaSocial   String
}

model PlanosPagamento {
  id           Int      @id @map("_id")
  acrescimo    Int
  desconto     Int
  idEmpresa    Int
  meioPgamento String[]
  nome         String
  parcelas     Int
}

model Produtos {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  idSecundario  Int
  idEmpresa     Int
  idFamilia     Int?
  idProduto     Int
  idGrupo       String
  acrescimo     Int?
  ativo         String
  desconto      Int?
  estoque       Int
  fornecedor    Int
  /// Could not determine type: the field only had null or empty values in the sample set.
  linha         String?
  multiploVenda Int
  nome          String
  nomeGrupo     String
  nomeFamilia   String?
  pesada        String
  /// Multiple data types found: Float: 95.3%, Int: 4.7% out of 1000 sampled entries
  preco         Float
  referencia    String?
  unidadeCaixa  Int
  unidadeFisica String
  unidadeVenda  Int
}

model Vendedores {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  idEmpresa  Int
  idVendedor Int
  fone       String
  metaVenda  Int
  nome       String
  Usuarios   Usuarios[]
}

model Usuarios {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  name       String
  password   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  vendedor   Vendedores? @relation(fields: [IdVendedor], references: [id])
  IdVendedor String?     @unique @db.ObjectId
}
